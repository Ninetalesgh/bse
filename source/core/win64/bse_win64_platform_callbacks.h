#pragma once

#include "bse_win64.h"

namespace win64
{
  void register_platform_callbacks();

  //////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////// Debug /////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////

  void debug_log( bse::debug::LogParameters const& parameters, char const* string, s32 size );

  //////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////// Memory ////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////



  //////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////// File IO ///////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////



  //////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////// System ////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////



  //////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////// Networking ////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////



  //////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////// Audio /////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////

};


namespace win64
{
  void debug_log( bse::debug::LogParameters const& parameters, char const* string, s32 size )
  {
    //wchar_t wideChars[bs::debug::MAX_DEBUG_MESSAGE_LENGTH];
   // utf8_to_wchar( string, wideChars, array_count( wideChars ) );

   // OutputDebugStringA( string );
    static char const* errorPrefix = "[Error] ";
    static char const* warningPrefix = "[Warning] ";
    static char const* infoPrefix = "";

    // char const* prefix = parameters.severity == bse::debug::LogSeverity::INFO ? infoPrefix :
     //  parameters.severity == bse::debug::LogSeverity::WARNING ? warningPrefix : errorPrefix;

     //printf( prefix );

    printf( string );
    // if ( flags & bs::DebugLogFlags::WRITE_TO_DEBUG_LOG_FILE )
    // {
     //  static HANDLE debug_log_file = CreateFileW( L"debug.log", GENERIC_WRITE, FILE_SHARE_READ, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0 );
     //  s32 bytesWritten {};

       // LockFile(debug_log_file, dwPos, 0, dwBytesRead, 0); 
     //  WriteFile( debug_log_file, string, size, (LPDWORD) &bytesWritten, 0 );
       // UnlockFile(debug_log_file, dwPos, 0, dwBytesRead, 0);
    // }
  };







  void register_platform_callbacks()
  {
    global::platform.callback.debug_log = &debug_log;
  }
};